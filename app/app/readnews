#!/usr/local/bin/python

import argparse
import datetime
import requests
import csv
import sys
import xml.etree.ElementTree as ET
from postgres_handler import PostgresHandler

RSS_URL_TEMPLATE = "https://news.google.com/rss/search?q={query}&ceid=US:en&hl=en-US&gl=US"


def fetch_rss_feed(search_term):
    """Fetch the RSS feed from Google News for the given search term."""
    url = RSS_URL_TEMPLATE.format(query=search_term)
    response = requests.get(url)

    if response.status_code != 200:
        print(f"Error: Unable to fetch RSS feed (Status Code: {response.status_code})", file=sys.stderr)
        sys.exit(1)

    return response.content


def parse_pub_date(pub_date_str):
    """Converts a publication date string to a datetime object."""
    if pub_date_str:
        try:
            return datetime.datetime.strptime(pub_date_str, '%a, %d %b %Y %H:%M:%S %Z')
        except ValueError as e:
            print(f"Error parsing date '{pub_date_str}': {e}")
    return None


def parse_rss_feed(xml_data):
    """Parse the RSS XML and extract headlines, publication dates, and sources."""
    root = ET.fromstring(xml_data)
    news_items = []

    for item in root.findall(".//item"):
        title = item.find("title").text if item.find("title") is not None else "No Title"
        pub_date_str = item.find("pubDate").text if item.find("pubDate") is not None else None
        source = item.find("source").text if item.find("source") is not None else "Unknown Source"

        # Use the separate function to parse the publication date
        pub_date = parse_pub_date(pub_date_str)

        news_items.append((title, pub_date, source))

    return news_items


def save_to_csv(news_items, output_file):
    """Save extracted news items to a CSV file."""
    with open(output_file, mode="w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["Title", "Publication Date", "Source"])  # CSV Header
        writer.writerows(news_items)

    print(f"CSV file saved: {output_file}")


def main():
    parser = argparse.ArgumentParser(
        description="Fetch Google News RSS feed and save headlines to Postgres."
    )
    parser.add_argument("search_term", type=str, help="Search term for Google News RSS")
    args = parser.parse_args()

    db_handler = PostgresHandler()

    xml_data = fetch_rss_feed(args.search_term)
    news_items = parse_rss_feed(xml_data)

    db_handler.insert_news_items(news_items)

    db_handler.close()


if __name__ == "__main__":
    main()
